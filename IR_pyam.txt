call funcs
comp jmp
assign
// name,             surname,    assign_val,  label,    operation, operand1,  operand2
   CALL_FUNC,        CALL_PENIS, TRUE,        TRUE,     FALSE,     TRUE,      FALSE
   IMPLEMENT_FUNC,   PENIS,      FALSE,       TRUE,     FALSE,     TRUE,      FALSE
   CMP_JMP,          ENTER,      FALSE,       TRUE,     TRUE,      TRUE,      FALSE
   ASSIGN,           GIPSY,      TRUE,        FALSE,    TRUE,      TRUE,      TRUE / FALSE
   RET,              KILL_PENIS  FALSE,       FALSE,    FALSE,     TRUE,      FALSE
   LABEL,            FIFT,       FALSE,       TRUE,     FALSE,     FALSE,     FALSE



   FIFT(label0)
   PENIS(88_tmp0, func_0_0)
   hlt(88_tmp0)

   MAIN
ASSIGN(88_tmp0, ADD, b, c)
ASSIGN(a, ADD, 88_tmp0, d)


#define IR_NUM_(assign_num_, num_)                                                                  \
        fprintf(                                                                                    \
            out,                                                                                    \
            "GIPSY(88_tmp%zu, %d, %ld)\t# num\n",                                                   \
            assign_num_,                                                                            \
            OP_TYPE_ASSIGNMENT,                                                                     \
            num_                                                                                    \
        )

#define IR_VAR_(assign_num_, var_num_)                                                              \
        fprintf(                                                                                    \
            out,                                                                                    \
            "GIPSY(88_tmp%zu, %d, var%ld)\t# var\n",                                                \
            assign_num_,                                                                            \
            OP_TYPE_DECL_ASSIGNMENT,                                                                \
            var_num_                                                                                \
        )

#define IR_ASSIGN_(assign_num_, op_type_, operand1_, operand2_)                                     \
        fprintf(                                                                                    \
            out,                                                                                    \
            "GIPSY(88_tmp%zu, %d, 88_tmp%zu, 88_tmp%zu)\t# %s\n",                                   \
            assign_num_,                                                                            \
            op_type_,                                                                               \
            operand1_,                                                                              \
            operand2_,                                                                              \
            op_type_to_str(op_type_)                                                                \
        )

#define IR_ASSIGN_VAR_(assign_var_, op_type_, operand1_)                                            \
        fprintf(                                                                                    \
            out,                                                                                    \
            "GIPSY(var%ld, %d, 88_tmp%zu)\t# %s\n",                                                 \
            assign_var_,                                                                            \
            op_type_,                                                                               \
            operand1_,                                                                              \
            op_type_to_str(op_type_)                                                                \
        )

#define IR_COND_JMP_(label_num_, op_type_, cond_res_)                                               \
        fprintf(                                                                                    \
            out,                                                                                    \
            "ENTER(label%zu, %d, 88_tmp%zu)\t# jmp %s\n",                                           \
            label_num_,                                                                             \
            op_type_,                                                                               \
            cond_res_,                                                                              \
            op_type_to_str(op_type_)                                                                \
        )

#define IR_JMP_(label_num_)                                                                         \
        fprintf(                                                                                    \
            out,                                                                                    \
            "ENTER(label%zu)\t# jmp not cond\n",                                                    \
            label_num_                                                                              \
        )

#define IR_LABEL_(label_num_)                                                                       \
        fprintf(                                                                                    \
            out,                                                                                    \
            "FIFT(label%zu)\t# label\n",                                                            \
            label_num_                                                                              \
        )

#define IR_CALL_FUNC_(assign_num_, func_num_, cnt_args_)                                            \
        fprintf(                                                                                    \
            out,                                                                                    \
            "CALL_PENIS(88_tmp%zu, func_%zu_%zu, %zu)\t# call func\n",                              \
            assign_num_,                                                                            \
            func_num_,                                                                              \
            cnt_args_,                                                                              \
            cnt_args_                                                                               \
        )

#define IR_CALL_MAIN_(assign_num_)                                                                  \
        fprintf(                                                                                    \
            out,                                                                                    \
            "CALL_PENIS(88_tmp%zu, main, 0)\t# call main\n",                                        \
            assign_num_                                                                             \
        )

#define IR_IMPLEMENT_FUNC_(func_num_, cnt_args_)                                                    \
        fprintf(                                                                                    \
            out,                                                                                    \
            "\nPENIS(func_%zu_%zu, %zu)\t# implement func\n",                                       \
            func_num_,                                                                              \
            cnt_args_,                                                                              \
            cnt_args_                                                                               \
        )

#define IR_IMPLEMENT_MAIN_()                                                                        \
        fprintf(                                                                                    \
            out,                                                                                    \
            "\nPENIS(main, 0)\t# implement main\n"                                                  \
        )

#define IR_RET_(ret_val_)                                                                           \
        fprintf(                                                                                    \
            out,                                                                                    \
            "KILL_PENIS(88_tmp%zu)\t# ret\n",                                                       \
            ret_val_                                                                                \
        )


#define OPERATION_HANDLE(num_, name_, keyword_, ...)                                                \
        static enum IrTranslationError translate_##name_(translator_t* const translator,            \
                                                         const tree_elem_t* elem, FILE* out);

#include "utils/src/operations/codegen.h"

#undef OPERATION_HANDLE

